name: Build and Release APK

# Basic CI/CD action to checkout branch that starts with "base-", run the unit tests, generate an
# APK, push the apk file to the 'releases' github tab
on:
  push:
    branches: [base-*]
  workflow_dispatch:
    inputs:
      logLevel:
        description: Trigger manually
        required: false
        default: 'trigger base something something info'
jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the main branch
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up JDK
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      # Step 3: Cache Gradle dependencies
      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle

      # Step 4: Set up Android SDK
      - name: Set up Android SDK
        uses: android-actions/setup-android@v2
        with:
          api-level: 34
          build-tools: 33.0.2
          cmake: 3.22.1

      # Typically you'll run unit tests here, but since I have one class that's
      # problematic(explained in code comments) I am disabling the unit test for that class.
      # Step 5: Run Unit Tests
      - name: Run Unit Tests
        run: ./gradlew test -Dtest.exclude=**/ui/listAndSearch/KittyListAndSearchViewModelTest.class

      # Step 5.1: Typically you could bump version which is something I always route for, but it
      # can't run in the current state of the repo.
      #- name: Bump version
      #  uses: //android-version-action file somewhere in git
      #  with:
      #    gradlePath: app/build.gradle
      #    versionCode: ${{github.run_number}}

      # Step 6: Build APK
      - name: Build APK
        run: ./gradlew assembleRelease

      # Step 7: Upload APK as a Release File to Releases Tab
      - name: Upload APK to Release
        id: upload-release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: app/build/outputs/apk/release/app-release.apk
          asset_name: app-release.apk
          asset_content_type: application/vnd.android.package-archive

      # Step 8: Create a GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "release-${{ github.run_number }}"
          release_name: "Release ${{ github.run_number }}"
          draft: false
          prerelease: false